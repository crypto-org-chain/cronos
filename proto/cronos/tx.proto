syntax = "proto3";
package cronos;

// this line is used by starport scaffolding # proto/tx/import

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cronos/cronos.proto";

option go_package = "github.com/crypto-org-chain/cronos/v2/x/cronos/types";

// Msg defines the Cronos Msg service
service Msg {
  // this line is used by starport scaffolding # proto/tx/rpc

  // ConvertVouchers defines a method for converting ibc voucher to cronos evm
  // coins.
  rpc ConvertVouchers(MsgConvertVouchers) returns (MsgConvertVouchersResponse);

  // TransferTokens defines a method to transfer cronos evm coins to another
  // chain through IBC
  rpc TransferTokens(MsgTransferTokens) returns (MsgTransferTokensResponse);

  // UpdateTokenMapping defines a method to update token mapping
  rpc UpdateTokenMapping(MsgUpdateTokenMapping) returns (MsgUpdateTokenMappingResponse);

  // TurnBridge defines a method to disable or enable the gravity bridge
  rpc TurnBridge(MsgTurnBridge) returns (MsgTurnBridgeResponse);

  // UpdateParams defines a method to update cronos module params
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // UpdatePermissions defines a method to update cronos admins permissions
  rpc UpdatePermissions(MsgUpdatePermissions) returns (MsgUpdatePermissionsResponse);
}

// MsgConvertVouchers represents a message to convert ibc voucher coins to
// cronos evm coins.
message MsgConvertVouchers {
  string   address                        = 1;
  repeated cosmos.base.v1beta1.Coin coins = 2
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// MsgTransferTokens represents a message to transfer cronos evm coins through
// ibc.
message MsgTransferTokens {
  string   from                           = 1;
  string   to                             = 2;
  repeated cosmos.base.v1beta1.Coin coins = 3
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// MsgConvertVouchersResponse defines the ConvertVouchers response type.
message MsgConvertVouchersResponse {}

// MsgTransferTokensResponse defines the TransferTokens response type.
message MsgTransferTokensResponse {}

// MsgUpdateTokenMapping defines the request type
message MsgUpdateTokenMapping {
  string sender   = 1;
  string denom    = 2;
  string contract = 3;
  // only when updating cronos (source) tokens
  string symbol  = 4;
  uint32 decimal = 5;
}

// MsgUpdateTokenMappingResponse defines the response type
message MsgUpdateTokenMappingResponse {}

// MsgTurnBridge defines the request type
message MsgTurnBridge {
  string sender = 1;
  bool   enable = 2;
}

// MsgTurnBridgegResponse defines the response type
message MsgTurnBridgeResponse {}

// MsgUpdateParams defines the request type for updating cronos params.
message MsgUpdateParams {
  // authority is the address of the governance account.
  string authority = 1;

  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response type.
message MsgUpdateParamsResponse {}

// MsgUpdatePermissions defines the request type for updating cronos
// permissions.
message MsgUpdatePermissions {
  string from        = 1;
  string address     = 2;
  uint64 permissions = 3;
}

// MsgUpdatePermissionsResponse defines the response type.
message MsgUpdatePermissionsResponse {}

// this line is used by starport scaffolding # proto/tx/message
