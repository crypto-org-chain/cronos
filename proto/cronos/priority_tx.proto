syntax = "proto3";
package cronos.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/crypto-org-chain/cronos/v2/x/cronos/types";

// PriorityTxService defines the gRPC service for submitting priority transactions
service PriorityTxService {
  // SubmitPriorityTx submits a transaction to the priority mempool
  rpc SubmitPriorityTx(SubmitPriorityTxRequest) returns (SubmitPriorityTxResponse) {
    option (google.api.http) = {
      post: "/cronos/v1/priority_tx/submit"
      body: "*"
    };
  }

  // GetPriorityTxStatus queries the status of a priority transaction
  rpc GetPriorityTxStatus(GetPriorityTxStatusRequest) returns (GetPriorityTxStatusResponse) {
    option (google.api.http).get = "/cronos/v1/priority_tx/status/{tx_hash}";
  }

  // GetPriorityMempoolStats returns statistics about the priority mempool
  rpc GetPriorityMempoolStats(GetPriorityMempoolStatsRequest) returns (GetPriorityMempoolStatsResponse) {
    option (google.api.http).get = "/cronos/v1/priority_tx/stats";
  }

  // ListPriorityTxs lists all priority transactions in the mempool
  rpc ListPriorityTxs(ListPriorityTxsRequest) returns (ListPriorityTxsResponse) {
    option (google.api.http).get = "/cronos/v1/priority_tx/list";
  }
}

// SubmitPriorityTxRequest is the request for submitting a priority transaction
message SubmitPriorityTxRequest {
  // tx_bytes is the raw transaction bytes
  bytes tx_bytes = 1;
  
  // priority_level is the requested priority level (1-10)
  uint32 priority_level = 2;
  
  // wait_for_inclusion indicates whether to wait for block inclusion
  bool wait_for_inclusion = 3;
}

// SubmitPriorityTxResponse is the response for a priority transaction submission
message SubmitPriorityTxResponse {
  // tx_hash is the hash of the submitted transaction
  string tx_hash = 1;
  
  // accepted indicates if the transaction was accepted into the priority mempool
  bool accepted = 2;
  
  // reason provides details if the transaction was rejected
  string reason = 3;
  
  // preconfirmation provides early confirmation details
  Preconfirmation preconfirmation = 4;
  
  // mempool_position is the position in the priority mempool (1 = first)
  uint32 mempool_position = 5;
  
  // estimated_inclusion_time is the estimated time until block inclusion (seconds)
  uint32 estimated_inclusion_time = 6;
}

// Preconfirmation represents an early confirmation before block inclusion
message Preconfirmation {
  // tx_hash is the transaction hash
  string tx_hash = 1;
  
  // timestamp is when the preconfirmation was issued
  int64 timestamp = 2;
  
  // validator is the validator that accepted the transaction
  string validator = 3;
  
  // priority_level is the assigned priority level
  uint32 priority_level = 4;
  
  // signature is the validator's signature over the preconfirmation
  bytes signature = 5;
  
  // expires_at is when this preconfirmation expires
  int64 expires_at = 6;
}

// GetPriorityTxStatusRequest is the request for querying priority tx status
message GetPriorityTxStatusRequest {
  // tx_hash is the transaction hash to query
  string tx_hash = 1;
}

// GetPriorityTxStatusResponse is the response for priority tx status query
message GetPriorityTxStatusResponse {
  // status is the current status of the transaction
  TxStatus status = 1;
  
  // in_mempool indicates if the transaction is in the mempool
  bool in_mempool = 2;
  
  // block_height is the height where the transaction was included (if applicable)
  int64 block_height = 3;
  
  // mempool_position is the current position in mempool
  uint32 mempool_position = 4;
  
  // preconfirmation is the preconfirmation details (if available)
  Preconfirmation preconfirmation = 5;
  
  // timestamp is when the transaction was first seen
  int64 timestamp = 6;
}

// TxStatus represents the status of a transaction
enum TxStatus {
  // UNKNOWN means the transaction is not found
  TX_STATUS_UNKNOWN = 0;
  
  // PENDING means the transaction is in the mempool
  TX_STATUS_PENDING = 1;
  
  // PRECONFIRMED means the transaction has received a preconfirmation
  TX_STATUS_PRECONFIRMED = 2;
  
  // INCLUDED means the transaction has been included in a block
  TX_STATUS_INCLUDED = 3;
  
  // REJECTED means the transaction was rejected
  TX_STATUS_REJECTED = 4;
  
  // EXPIRED means the preconfirmation expired
  TX_STATUS_EXPIRED = 5;
}

// GetPriorityMempoolStatsRequest is the request for mempool statistics
message GetPriorityMempoolStatsRequest {}

// GetPriorityMempoolStatsResponse is the response for mempool statistics
message GetPriorityMempoolStatsResponse {
  // total_txs is the total number of transactions in mempool
  uint32 total_txs = 1;
  
  // priority_txs is the number of priority transactions
  uint32 priority_txs = 2;
  
  // normal_txs is the number of normal transactions
  uint32 normal_txs = 3;
  
  // preconfirmed_txs is the number of preconfirmed transactions
  uint32 preconfirmed_txs = 4;
  
  // avg_priority_level is the average priority level
  float avg_priority_level = 5;
  
  // mempool_size_bytes is the total size of mempool in bytes
  uint64 mempool_size_bytes = 6;
}

// ListPriorityTxsRequest is the request for listing priority transactions
message ListPriorityTxsRequest {
  // pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  
  // include_preconfirmations indicates whether to include preconfirmation details
  bool include_preconfirmations = 2;
}

// ListPriorityTxsResponse is the response for listing priority transactions
message ListPriorityTxsResponse {
  // txs is the list of priority transactions
  repeated PriorityTxInfo txs = 1;
  
  // pagination defines the pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// PriorityTxInfo contains information about a priority transaction
message PriorityTxInfo {
  // tx_hash is the transaction hash
  string tx_hash = 1;
  
  // priority_level is the transaction priority level
  uint32 priority_level = 2;
  
  // timestamp is when the transaction was added
  int64 timestamp = 3;
  
  // size_bytes is the transaction size
  uint32 size_bytes = 4;
  
  // preconfirmation is the preconfirmation (if available)
  Preconfirmation preconfirmation = 5;
  
  // position is the position in the mempool
  uint32 position = 6;
}

