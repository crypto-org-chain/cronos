syntax = "proto3";
package icaauth.v1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/crypto-org-chain/cronos/v2/x/icaauth/types";

// Msg defines the Msg service.
service Msg {
  // RegisterAccount registers an interchain account on host chain with given
  // `connection_id`
  rpc RegisterAccount(MsgRegisterAccount) returns (MsgRegisterAccountResponse);

  // SubmitTx submits a transaction to the host chain on behalf of interchain
  // account
  rpc SubmitTx(MsgSubmitTx) returns (MsgSubmitTxResponse);
}

// MsgRegisterAccount defines the request message for MsgRegisterAccount
message MsgRegisterAccount {
  // owner represents the owner of the interchain account
  string owner = 1;

  // connection_id represents the IBC `connection_id` of the host chain
  string connection_id = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];

  // version represents the version of the ICA channel
  string version = 3;
}

// MsgRegisterAccountResponse defines the response message for
// MsgRegisterAccount
message MsgRegisterAccountResponse {}

// MsgSubmitTx defines the request message for MsgSubmitTx
message MsgSubmitTx {
  // owner represents the owner of the interchain account
  string owner = 1;

  // connection_id represents the IBC `connection_id` of the host chain
  string connection_id = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];

  // msgs represents the transactions to be submitted to the host chain
  repeated google.protobuf.Any msgs = 3 [(cosmos_proto.accepts_interface) = "sdk.Msg"];

  // timeout_duration represents the timeout duration for the IBC packet from
  // last block
  google.protobuf.Duration timeout_duration = 4 [(gogoproto.stdduration) = true];
}

// MsgSubmitTxResponse defines the response message for MsgSubmitTx
message MsgSubmitTxResponse {
  uint64 sequence = 1;
}