// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cronos/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types "github.com/evmos/ethermint/x/evm/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ContractByDenomRequest is the request type of ContractByDenom call
type ContractByDenomRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *ContractByDenomRequest) Reset()         { *m = ContractByDenomRequest{} }
func (m *ContractByDenomRequest) String() string { return proto.CompactTextString(m) }
func (*ContractByDenomRequest) ProtoMessage()    {}
func (*ContractByDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ed0fd688c48372, []int{0}
}
func (m *ContractByDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractByDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractByDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractByDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractByDenomRequest.Merge(m, src)
}
func (m *ContractByDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContractByDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractByDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContractByDenomRequest proto.InternalMessageInfo

// ContractByDenomRequest is the response type of ContractByDenom call
type ContractByDenomResponse struct {
	Contract     string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	AutoContract string `protobuf:"bytes,2,opt,name=auto_contract,json=autoContract,proto3" json:"auto_contract,omitempty"`
}

func (m *ContractByDenomResponse) Reset()         { *m = ContractByDenomResponse{} }
func (m *ContractByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*ContractByDenomResponse) ProtoMessage()    {}
func (*ContractByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ed0fd688c48372, []int{1}
}
func (m *ContractByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractByDenomResponse.Merge(m, src)
}
func (m *ContractByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *ContractByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContractByDenomResponse proto.InternalMessageInfo

func (m *ContractByDenomResponse) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *ContractByDenomResponse) GetAutoContract() string {
	if m != nil {
		return m.AutoContract
	}
	return ""
}

// DenomByContractRequest is the request type of DenomByContract call
type DenomByContractRequest struct {
	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (m *DenomByContractRequest) Reset()         { *m = DenomByContractRequest{} }
func (m *DenomByContractRequest) String() string { return proto.CompactTextString(m) }
func (*DenomByContractRequest) ProtoMessage()    {}
func (*DenomByContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ed0fd688c48372, []int{2}
}
func (m *DenomByContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomByContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomByContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomByContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomByContractRequest.Merge(m, src)
}
func (m *DenomByContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *DenomByContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomByContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DenomByContractRequest proto.InternalMessageInfo

// DenomByContractResponse is the response type of DenomByContract call
type DenomByContractResponse struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *DenomByContractResponse) Reset()         { *m = DenomByContractResponse{} }
func (m *DenomByContractResponse) String() string { return proto.CompactTextString(m) }
func (*DenomByContractResponse) ProtoMessage()    {}
func (*DenomByContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ed0fd688c48372, []int{3}
}
func (m *DenomByContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomByContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomByContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomByContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomByContractResponse.Merge(m, src)
}
func (m *DenomByContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *DenomByContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomByContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DenomByContractResponse proto.InternalMessageInfo

func (m *DenomByContractResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// ReplayBlockRequest
type ReplayBlockRequest struct {
	// the eth messages in the block
	Msgs        []*types.MsgEthereumTx `protobuf:"bytes,1,rep,name=msgs,proto3" json:"msgs,omitempty"`
	BlockNumber int64                  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash   string                 `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockTime   time.Time              `protobuf:"bytes,4,opt,name=block_time,json=blockTime,proto3,stdtime" json:"block_time"`
}

func (m *ReplayBlockRequest) Reset()         { *m = ReplayBlockRequest{} }
func (m *ReplayBlockRequest) String() string { return proto.CompactTextString(m) }
func (*ReplayBlockRequest) ProtoMessage()    {}
func (*ReplayBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ed0fd688c48372, []int{4}
}
func (m *ReplayBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplayBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplayBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplayBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplayBlockRequest.Merge(m, src)
}
func (m *ReplayBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReplayBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplayBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplayBlockRequest proto.InternalMessageInfo

// ReplayBlockResponse
type ReplayBlockResponse struct {
	Responses []*types.MsgEthereumTxResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (m *ReplayBlockResponse) Reset()         { *m = ReplayBlockResponse{} }
func (m *ReplayBlockResponse) String() string { return proto.CompactTextString(m) }
func (*ReplayBlockResponse) ProtoMessage()    {}
func (*ReplayBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ed0fd688c48372, []int{5}
}
func (m *ReplayBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplayBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplayBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplayBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplayBlockResponse.Merge(m, src)
}
func (m *ReplayBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReplayBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplayBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReplayBlockResponse proto.InternalMessageInfo

func (m *ReplayBlockResponse) GetResponses() []*types.MsgEthereumTxResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ed0fd688c48372, []int{6}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ed0fd688c48372, []int{7}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryPermissionsRequest is the request type for the Query/Permissions RPC
// method.
type QueryPermissionsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryPermissionsRequest) Reset()         { *m = QueryPermissionsRequest{} }
func (m *QueryPermissionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPermissionsRequest) ProtoMessage()    {}
func (*QueryPermissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ed0fd688c48372, []int{8}
}
func (m *QueryPermissionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPermissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPermissionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPermissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPermissionsRequest.Merge(m, src)
}
func (m *QueryPermissionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPermissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPermissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPermissionsRequest proto.InternalMessageInfo

func (m *QueryPermissionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryPermissionsResponse is the response type for the Query/Permissions RPC
// method.
type QueryPermissionsResponse struct {
	CanChangeTokenMapping bool `protobuf:"varint,1,opt,name=can_change_token_mapping,json=canChangeTokenMapping,proto3" json:"can_change_token_mapping,omitempty"`
	CanTurnBridge         bool `protobuf:"varint,2,opt,name=can_turn_bridge,json=canTurnBridge,proto3" json:"can_turn_bridge,omitempty"`
}

func (m *QueryPermissionsResponse) Reset()         { *m = QueryPermissionsResponse{} }
func (m *QueryPermissionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPermissionsResponse) ProtoMessage()    {}
func (*QueryPermissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ed0fd688c48372, []int{9}
}
func (m *QueryPermissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPermissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPermissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPermissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPermissionsResponse.Merge(m, src)
}
func (m *QueryPermissionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPermissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPermissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPermissionsResponse proto.InternalMessageInfo

func (m *QueryPermissionsResponse) GetCanChangeTokenMapping() bool {
	if m != nil {
		return m.CanChangeTokenMapping
	}
	return false
}

func (m *QueryPermissionsResponse) GetCanTurnBridge() bool {
	if m != nil {
		return m.CanTurnBridge
	}
	return false
}

func init() {
	proto.RegisterType((*ContractByDenomRequest)(nil), "cronos.ContractByDenomRequest")
	proto.RegisterType((*ContractByDenomResponse)(nil), "cronos.ContractByDenomResponse")
	proto.RegisterType((*DenomByContractRequest)(nil), "cronos.DenomByContractRequest")
	proto.RegisterType((*DenomByContractResponse)(nil), "cronos.DenomByContractResponse")
	proto.RegisterType((*ReplayBlockRequest)(nil), "cronos.ReplayBlockRequest")
	proto.RegisterType((*ReplayBlockResponse)(nil), "cronos.ReplayBlockResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "cronos.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "cronos.QueryParamsResponse")
	proto.RegisterType((*QueryPermissionsRequest)(nil), "cronos.QueryPermissionsRequest")
	proto.RegisterType((*QueryPermissionsResponse)(nil), "cronos.QueryPermissionsResponse")
}

func init() { proto.RegisterFile("cronos/query.proto", fileDescriptor_d4ed0fd688c48372) }

var fileDescriptor_d4ed0fd688c48372 = []byte{
	// 780 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4f, 0x4f, 0xe3, 0x46,
	0x14, 0x8f, 0x21, 0xa4, 0x61, 0x02, 0x45, 0x9d, 0x50, 0x30, 0x6e, 0x6b, 0xa7, 0x6e, 0x05, 0x54,
	0x02, 0x5b, 0x84, 0x4a, 0xad, 0x7a, 0xe8, 0x21, 0x29, 0x12, 0x17, 0x50, 0x6b, 0xe5, 0x84, 0x90,
	0xac, 0x89, 0x33, 0x75, 0x2c, 0xf0, 0x8c, 0xf1, 0x8c, 0x23, 0x22, 0x84, 0x54, 0xb5, 0x97, 0x1e,
	0x91, 0xfa, 0x05, 0x38, 0xf7, 0x93, 0x70, 0x44, 0xea, 0xa5, 0xea, 0xa1, 0xbb, 0x82, 0x3d, 0xec,
	0xc7, 0x58, 0x79, 0x3c, 0x93, 0x04, 0x12, 0x76, 0x4f, 0x9e, 0xf9, 0xfd, 0xde, 0x9f, 0xdf, 0x9b,
	0xf7, 0x9e, 0x01, 0x0c, 0x52, 0x4a, 0x28, 0x73, 0x2f, 0x32, 0x9c, 0x0e, 0x9d, 0x24, 0xa5, 0x9c,
	0xc2, 0x4a, 0x81, 0x19, 0xab, 0x21, 0x0d, 0xa9, 0x80, 0xdc, 0xfc, 0x54, 0xb0, 0xc6, 0xe7, 0x21,
	0xa5, 0xe1, 0x39, 0x76, 0x51, 0x12, 0xb9, 0x88, 0x10, 0xca, 0x11, 0x8f, 0x28, 0x61, 0x92, 0xb5,
	0x24, 0x2b, 0x6e, 0xdd, 0xec, 0x57, 0x97, 0x47, 0x31, 0x66, 0x1c, 0xc5, 0x89, 0x34, 0xd8, 0xc0,
	0xbc, 0x8f, 0xd3, 0x38, 0x22, 0xdc, 0xc5, 0x83, 0xd8, 0x1d, 0xec, 0xb9, 0xfc, 0x52, 0x52, 0x75,
	0xa9, 0xa5, 0xf8, 0x14, 0xa0, 0xfd, 0x3d, 0x58, 0x6b, 0x53, 0xc2, 0x53, 0x14, 0xf0, 0xd6, 0xf0,
	0x27, 0x4c, 0x68, 0xec, 0xe1, 0x8b, 0x0c, 0x33, 0x0e, 0x57, 0xc1, 0x42, 0x2f, 0xbf, 0xeb, 0x5a,
	0x43, 0xdb, 0x5e, 0xf4, 0x8a, 0xcb, 0x0f, 0xd5, 0x3f, 0x6f, 0xad, 0xd2, 0xdb, 0x5b, 0xab, 0x64,
	0x9f, 0x80, 0xf5, 0x29, 0x4f, 0x96, 0x50, 0xc2, 0x30, 0x34, 0x40, 0x35, 0x90, 0x94, 0xf4, 0x1e,
	0xdd, 0xe1, 0x57, 0x60, 0x19, 0x65, 0x9c, 0xfa, 0x23, 0x83, 0x39, 0x61, 0xb0, 0x94, 0x83, 0x2a,
	0x9e, 0xfd, 0x23, 0x58, 0x13, 0x11, 0x5b, 0x43, 0x05, 0x29, 0x55, 0xef, 0x09, 0x3d, 0xa1, 0xcd,
	0x05, 0xeb, 0x53, 0xfe, 0x52, 0xdb, 0xcc, 0xb2, 0xec, 0xff, 0x34, 0x00, 0x3d, 0x9c, 0x9c, 0xa3,
	0x61, 0xeb, 0x9c, 0x06, 0x67, 0x2a, 0xdb, 0x3e, 0x28, 0xc7, 0x2c, 0x64, 0xba, 0xd6, 0x98, 0xdf,
	0xae, 0x35, 0x2d, 0x67, 0xf4, 0xb8, 0x0e, 0x1e, 0xc4, 0xce, 0x60, 0xcf, 0x39, 0x62, 0xe1, 0x41,
	0x8e, 0xe1, 0x2c, 0xee, 0x5c, 0x7a, 0xc2, 0x18, 0x7e, 0x09, 0x96, 0xba, 0x79, 0x10, 0x9f, 0x64,
	0x71, 0x17, 0xa7, 0xa2, 0xc0, 0x79, 0xaf, 0x26, 0xb0, 0x63, 0x01, 0xc1, 0x2f, 0x00, 0x28, 0x4c,
	0xfa, 0x88, 0xf5, 0xf5, 0x79, 0xa1, 0x64, 0x51, 0x20, 0x87, 0x88, 0xf5, 0x61, 0x5b, 0xd1, 0x79,
	0x77, 0xf5, 0x72, 0x43, 0xdb, 0xae, 0x35, 0x0d, 0xa7, 0x68, 0xbd, 0xa3, 0x5a, 0xef, 0x74, 0x54,
	0xeb, 0x5b, 0xd5, 0xbb, 0xff, 0xad, 0xd2, 0xcd, 0x2b, 0x4b, 0x93, 0x41, 0x72, 0x66, 0xe2, 0x35,
	0x4e, 0x41, 0xfd, 0x49, 0x6d, 0xf2, 0x25, 0x0e, 0xc0, 0x62, 0x2a, 0xcf, 0xaa, 0xc2, 0xad, 0x0f,
	0x55, 0x28, 0xed, 0xbd, 0xb1, 0xa7, 0xbd, 0x0a, 0xe0, 0x2f, 0xf9, 0x74, 0xff, 0x8c, 0x52, 0x14,
	0x33, 0xf9, 0x72, 0x76, 0x1b, 0xd4, 0x9f, 0xa0, 0x32, 0xe7, 0x0e, 0xa8, 0x24, 0x02, 0x11, 0xcf,
	0x5f, 0x6b, 0x7e, 0xec, 0xc8, 0x69, 0x2c, 0xec, 0x5a, 0xe5, 0xbc, 0x12, 0x4f, 0xda, 0xd8, 0xfb,
	0x60, 0xbd, 0x08, 0x92, 0x4b, 0x62, 0x2c, 0xdf, 0x03, 0xd5, 0x19, 0x1d, 0x7c, 0x84, 0x7a, 0xbd,
	0x14, 0x33, 0x26, 0x1b, 0xa9, 0xae, 0xf6, 0x15, 0xd0, 0xa7, 0x9d, 0x64, 0xfa, 0xef, 0x80, 0x1e,
	0x20, 0xe2, 0x07, 0x7d, 0x44, 0x42, 0xec, 0x73, 0x7a, 0x86, 0x89, 0x1f, 0xa3, 0x24, 0x89, 0x48,
	0x28, 0xc2, 0x54, 0xbd, 0x4f, 0x03, 0x44, 0xda, 0x82, 0xee, 0xe4, 0xec, 0x51, 0x41, 0xc2, 0x4d,
	0xb0, 0x92, 0x3b, 0xf2, 0x2c, 0x25, 0x7e, 0x37, 0x8d, 0x7a, 0x21, 0x16, 0x6d, 0xad, 0x7a, 0xcb,
	0x01, 0x22, 0x9d, 0x2c, 0x25, 0x2d, 0x01, 0x36, 0xff, 0x2e, 0x83, 0x05, 0x91, 0x1d, 0xfe, 0xa6,
	0x81, 0x95, 0x67, 0xfb, 0x01, 0x4d, 0x55, 0xed, 0xec, 0x95, 0x33, 0xac, 0x17, 0xf9, 0x42, 0xbf,
	0xbd, 0xf3, 0xfb, 0x3f, 0x6f, 0xfe, 0x9a, 0xdb, 0x84, 0x5f, 0xcb, 0x25, 0xce, 0xf7, 0x5b, 0x8d,
	0xbf, 0xdf, 0x1d, 0xfa, 0x62, 0x98, 0xdd, 0x2b, 0xf1, 0xb9, 0x86, 0x7f, 0x68, 0x60, 0xe5, 0xd9,
	0x1a, 0x8c, 0x25, 0xcc, 0xde, 0xaf, 0xb1, 0x84, 0x17, 0xf6, 0xc7, 0x76, 0x85, 0x84, 0x6f, 0xe0,
	0xd6, 0x84, 0x04, 0x91, 0x2f, 0xcf, 0xaf, 0xb4, 0xb8, 0x57, 0xea, 0x74, 0x0d, 0x0f, 0x41, 0x6d,
	0x62, 0xfa, 0xa0, 0xa1, 0x12, 0x4c, 0xaf, 0x9b, 0xf1, 0xd9, 0x4c, 0x4e, 0x26, 0x2e, 0xc1, 0x53,
	0x50, 0x29, 0xc6, 0x64, 0x1c, 0x64, 0x7a, 0xf2, 0xc6, 0x41, 0x66, 0xcc, 0x9f, 0xbd, 0x21, 0xd4,
	0xd7, 0xe1, 0x27, 0x13, 0xea, 0x8b, 0x61, 0x83, 0x09, 0xa8, 0x4d, 0x8c, 0x0c, 0xb4, 0x9e, 0x86,
	0x99, 0x9a, 0x40, 0xa3, 0xf1, 0xb2, 0x81, 0x4c, 0x66, 0x8a, 0x64, 0x3a, 0x5c, 0x9b, 0x4c, 0x36,
	0xb6, 0x6b, 0x1d, 0xdf, 0x3d, 0x98, 0xda, 0xfd, 0x83, 0xa9, 0xbd, 0x7e, 0x30, 0xb5, 0x9b, 0x47,
	0xb3, 0x74, 0xff, 0x68, 0x96, 0xfe, 0x7d, 0x34, 0x4b, 0x27, 0xdf, 0x86, 0x11, 0xef, 0x67, 0x5d,
	0x27, 0xa0, 0xb1, 0x1b, 0xa4, 0xc3, 0x84, 0xd3, 0x5d, 0x9a, 0x86, 0xbb, 0x41, 0x1f, 0x45, 0x64,
	0x14, 0xac, 0xe9, 0x5e, 0xaa, 0x33, 0x1f, 0x26, 0x98, 0x75, 0x2b, 0xe2, 0xd7, 0xb0, 0xff, 0x2e,
	0x00, 0x00, 0xff, 0xff, 0x45, 0xdb, 0x55, 0xc7, 0x75, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ContractByDenom queries contract addresses by native denom
	ContractByDenom(ctx context.Context, in *ContractByDenomRequest, opts ...grpc.CallOption) (*ContractByDenomResponse, error)
	// DenomByContract queries native denom by contract address
	DenomByContract(ctx context.Context, in *DenomByContractRequest, opts ...grpc.CallOption) (*DenomByContractResponse, error)
	// ReplayBlock replay the eth messages in the block to recover the results of
	// false-failed txs.
	ReplayBlock(ctx context.Context, in *ReplayBlockRequest, opts ...grpc.CallOption) (*ReplayBlockResponse, error)
	// Params queries all parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Params queries permissions for a specific address..
	Permissions(ctx context.Context, in *QueryPermissionsRequest, opts ...grpc.CallOption) (*QueryPermissionsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ContractByDenom(ctx context.Context, in *ContractByDenomRequest, opts ...grpc.CallOption) (*ContractByDenomResponse, error) {
	out := new(ContractByDenomResponse)
	err := c.cc.Invoke(ctx, "/cronos.Query/ContractByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomByContract(ctx context.Context, in *DenomByContractRequest, opts ...grpc.CallOption) (*DenomByContractResponse, error) {
	out := new(DenomByContractResponse)
	err := c.cc.Invoke(ctx, "/cronos.Query/DenomByContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReplayBlock(ctx context.Context, in *ReplayBlockRequest, opts ...grpc.CallOption) (*ReplayBlockResponse, error) {
	out := new(ReplayBlockResponse)
	err := c.cc.Invoke(ctx, "/cronos.Query/ReplayBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/cronos.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Permissions(ctx context.Context, in *QueryPermissionsRequest, opts ...grpc.CallOption) (*QueryPermissionsResponse, error) {
	out := new(QueryPermissionsResponse)
	err := c.cc.Invoke(ctx, "/cronos.Query/Permissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ContractByDenom queries contract addresses by native denom
	ContractByDenom(context.Context, *ContractByDenomRequest) (*ContractByDenomResponse, error)
	// DenomByContract queries native denom by contract address
	DenomByContract(context.Context, *DenomByContractRequest) (*DenomByContractResponse, error)
	// ReplayBlock replay the eth messages in the block to recover the results of
	// false-failed txs.
	ReplayBlock(context.Context, *ReplayBlockRequest) (*ReplayBlockResponse, error)
	// Params queries all parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Params queries permissions for a specific address..
	Permissions(context.Context, *QueryPermissionsRequest) (*QueryPermissionsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ContractByDenom(ctx context.Context, req *ContractByDenomRequest) (*ContractByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractByDenom not implemented")
}
func (*UnimplementedQueryServer) DenomByContract(ctx context.Context, req *DenomByContractRequest) (*DenomByContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomByContract not implemented")
}
func (*UnimplementedQueryServer) ReplayBlock(ctx context.Context, req *ReplayBlockRequest) (*ReplayBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplayBlock not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Permissions(ctx context.Context, req *QueryPermissionsRequest) (*QueryPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Permissions not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ContractByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronos.Query/ContractByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractByDenom(ctx, req.(*ContractByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenomByContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronos.Query/DenomByContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomByContract(ctx, req.(*DenomByContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReplayBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplayBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReplayBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronos.Query/ReplayBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReplayBlock(ctx, req.(*ReplayBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronos.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Permissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Permissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronos.Query/Permissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Permissions(ctx, req.(*QueryPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cronos.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContractByDenom",
			Handler:    _Query_ContractByDenom_Handler,
		},
		{
			MethodName: "DenomByContract",
			Handler:    _Query_DenomByContract_Handler,
		},
		{
			MethodName: "ReplayBlock",
			Handler:    _Query_ReplayBlock_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Permissions",
			Handler:    _Query_Permissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cronos/query.proto",
}

func (m *ContractByDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractByDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractByDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AutoContract) > 0 {
		i -= len(m.AutoContract)
		copy(dAtA[i:], m.AutoContract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AutoContract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomByContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomByContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomByContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomByContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomByContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomByContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplayBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplayBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.BlockTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.BlockTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintQuery(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplayBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplayBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplayBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Responses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPermissionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPermissionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPermissionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPermissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPermissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPermissionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanTurnBridge {
		i--
		if m.CanTurnBridge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.CanChangeTokenMapping {
		i--
		if m.CanChangeTokenMapping {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContractByDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ContractByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AutoContract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DenomByContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DenomByContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ReplayBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.BlockNumber != 0 {
		n += 1 + sovQuery(uint64(m.BlockNumber))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.BlockTime)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *ReplayBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPermissionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPermissionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanChangeTokenMapping {
		n += 2
	}
	if m.CanTurnBridge {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContractByDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractByDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractByDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomByContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomByContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomByContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomByContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomByContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomByContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplayBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplayBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplayBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &types.MsgEthereumTx{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplayBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplayBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplayBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &types.MsgEthereumTxResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPermissionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPermissionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPermissionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPermissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPermissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPermissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanChangeTokenMapping", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanChangeTokenMapping = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanTurnBridge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanTurnBridge = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
