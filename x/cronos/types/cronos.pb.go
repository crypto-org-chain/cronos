// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cronos/cronos.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the cronos module.
type Params struct {
	IbcCroDenom string `protobuf:"bytes,1,opt,name=ibc_cro_denom,json=ibcCroDenom,proto3" json:"ibc_cro_denom,omitempty" yaml:"ibc_cro_denom,omitempty"`
	IbcTimeout  uint64 `protobuf:"varint,2,opt,name=ibc_timeout,json=ibcTimeout,proto3" json:"ibc_timeout,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bc54992a93db2d2, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetIbcCroDenom() string {
	if m != nil {
		return m.IbcCroDenom
	}
	return ""
}

func (m *Params) GetIbcTimeout() uint64 {
	if m != nil {
		return m.IbcTimeout
	}
	return 0
}

// TokenMappingChangeProposal defines a proposal to change one token mapping.
type TokenMappingChangeProposal struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Denom       string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Contract    string `protobuf:"bytes,4,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (m *TokenMappingChangeProposal) Reset()      { *m = TokenMappingChangeProposal{} }
func (*TokenMappingChangeProposal) ProtoMessage() {}
func (*TokenMappingChangeProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bc54992a93db2d2, []int{1}
}
func (m *TokenMappingChangeProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenMappingChangeProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenMappingChangeProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenMappingChangeProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenMappingChangeProposal.Merge(m, src)
}
func (m *TokenMappingChangeProposal) XXX_Size() int {
	return m.Size()
}
func (m *TokenMappingChangeProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenMappingChangeProposal.DiscardUnknown(m)
}

var xxx_messageInfo_TokenMappingChangeProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "cronos.Params")
	proto.RegisterType((*TokenMappingChangeProposal)(nil), "cronos.TokenMappingChangeProposal")
}

func init() { proto.RegisterFile("cronos/cronos.proto", fileDescriptor_8bc54992a93db2d2) }

var fileDescriptor_8bc54992a93db2d2 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x6e, 0xea, 0x30,
	0x14, 0x86, 0xe3, 0x7b, 0xb9, 0x08, 0x8c, 0xee, 0x92, 0xcb, 0x80, 0x18, 0x1c, 0x94, 0x89, 0xe1,
	0x42, 0x54, 0x75, 0x63, 0x84, 0xaa, 0x4b, 0x55, 0x09, 0x45, 0x4c, 0x5d, 0x90, 0x63, 0xac, 0x60,
	0x15, 0xfb, 0x58, 0xce, 0x41, 0x6d, 0xde, 0xa0, 0x23, 0x63, 0x47, 0x1e, 0xa7, 0x23, 0x63, 0xa7,
	0xaa, 0x82, 0x37, 0xe8, 0x13, 0x54, 0x89, 0xdb, 0xaa, 0x9d, 0x7c, 0xbe, 0xef, 0xd7, 0xb1, 0x7e,
	0x1d, 0xfa, 0x4f, 0x38, 0x30, 0x50, 0x24, 0xfe, 0x19, 0x5b, 0x07, 0x08, 0x61, 0xd3, 0x53, 0xbf,
	0x9b, 0x43, 0x0e, 0xb5, 0x4a, 0xaa, 0xc9, 0xa7, 0xf1, 0x1d, 0x6d, 0xce, 0xb9, 0xe3, 0xba, 0x08,
	0x2f, 0xe9, 0x5f, 0x95, 0x89, 0xa5, 0x70, 0xb0, 0x5c, 0x49, 0x03, 0xba, 0x47, 0x06, 0x64, 0xd8,
	0x9e, 0xc6, 0x6f, 0x2f, 0x11, 0x2b, 0xb9, 0xde, 0x4c, 0xe2, 0x1f, 0xf1, 0x7f, 0xd0, 0x0a, 0xa5,
	0xb6, 0x58, 0xc6, 0x69, 0x47, 0x65, 0x62, 0xe6, 0xe0, 0xa2, 0xf2, 0x61, 0x44, 0x2b, 0x5c, 0xa2,
	0xd2, 0x12, 0xb6, 0xd8, 0xfb, 0x35, 0x20, 0xc3, 0x46, 0x4a, 0x55, 0x26, 0x16, 0xde, 0x4c, 0x1a,
	0x8f, 0xfb, 0x28, 0x88, 0x77, 0x84, 0xf6, 0x17, 0x70, 0x2b, 0xcd, 0x35, 0xb7, 0x56, 0x99, 0x7c,
	0xb6, 0xe6, 0x26, 0x97, 0x73, 0x07, 0x16, 0x0a, 0xbe, 0x09, 0xbb, 0xf4, 0x0f, 0x2a, 0xdc, 0x48,
	0xdf, 0x22, 0xf5, 0x10, 0x0e, 0x68, 0x67, 0x25, 0x0b, 0xe1, 0x94, 0x45, 0x05, 0xa6, 0xfe, 0xbb,
	0x9d, 0x7e, 0x57, 0xd5, 0x9e, 0x6f, 0xff, 0xdb, 0xef, 0xd5, 0x10, 0xf6, 0x69, 0x4b, 0x80, 0x41,
	0xc7, 0x05, 0xf6, 0x1a, 0x75, 0xf0, 0xc5, 0x93, 0xd6, 0xc3, 0x3e, 0x0a, 0xaa, 0x4a, 0xd3, 0xab,
	0xa7, 0x23, 0x23, 0x87, 0x23, 0x23, 0xaf, 0x47, 0x46, 0x76, 0x27, 0x16, 0x1c, 0x4e, 0x2c, 0x78,
	0x3e, 0xb1, 0xe0, 0xe6, 0x2c, 0x57, 0xb8, 0xde, 0x66, 0x63, 0x01, 0x3a, 0x11, 0xae, 0xb4, 0x08,
	0x23, 0x70, 0xf9, 0x48, 0xac, 0xb9, 0x32, 0x1f, 0xd7, 0x4e, 0xee, 0x3f, 0x07, 0x2c, 0xad, 0x2c,
	0xb2, 0x66, 0x7d, 0xdf, 0xf3, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x82, 0x9d, 0xe5, 0x71, 0x94,
	0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IbcTimeout != 0 {
		i = encodeVarintCronos(dAtA, i, uint64(m.IbcTimeout))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IbcCroDenom) > 0 {
		i -= len(m.IbcCroDenom)
		copy(dAtA[i:], m.IbcCroDenom)
		i = encodeVarintCronos(dAtA, i, uint64(len(m.IbcCroDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenMappingChangeProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenMappingChangeProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenMappingChangeProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintCronos(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintCronos(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCronos(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCronos(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCronos(dAtA []byte, offset int, v uint64) int {
	offset -= sovCronos(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IbcCroDenom)
	if l > 0 {
		n += 1 + l + sovCronos(uint64(l))
	}
	if m.IbcTimeout != 0 {
		n += 1 + sovCronos(uint64(m.IbcTimeout))
	}
	return n
}

func (m *TokenMappingChangeProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCronos(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCronos(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovCronos(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovCronos(uint64(l))
	}
	return n
}

func sovCronos(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCronos(x uint64) (n int) {
	return sovCronos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCronos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcCroDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcCroDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcTimeout", wireType)
			}
			m.IbcTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IbcTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCronos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCronos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenMappingChangeProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCronos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenMappingChangeProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenMappingChangeProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCronos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCronos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCronos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCronos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCronos
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCronos
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCronos
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCronos        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCronos          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCronos = fmt.Errorf("proto: unexpected end of group")
)
