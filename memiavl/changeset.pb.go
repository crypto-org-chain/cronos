// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: memiavl/changeset.proto

package memiavl

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto1 "github.com/cosmos/iavl/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NamedChangeSet combine a tree name with the changeset
type NamedChangeSet struct {
	Changeset proto1.ChangeSet `protobuf:"bytes,1,opt,name=changeset,proto3" json:"changeset"`
	Name      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *NamedChangeSet) Reset()         { *m = NamedChangeSet{} }
func (m *NamedChangeSet) String() string { return proto.CompactTextString(m) }
func (*NamedChangeSet) ProtoMessage()    {}
func (*NamedChangeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_54242fa334002fa1, []int{0}
}
func (m *NamedChangeSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamedChangeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamedChangeSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamedChangeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamedChangeSet.Merge(m, src)
}
func (m *NamedChangeSet) XXX_Size() int {
	return m.Size()
}
func (m *NamedChangeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_NamedChangeSet.DiscardUnknown(m)
}

var xxx_messageInfo_NamedChangeSet proto.InternalMessageInfo

func (m *NamedChangeSet) GetChangeset() proto1.ChangeSet {
	if m != nil {
		return m.Changeset
	}
	return proto1.ChangeSet{}
}

func (m *NamedChangeSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// TreeNameUpgrade defines upgrade of tree names:
// - New tree: { name: "tree" }
// - Delete tree: { name: "tree", delete: true }
// - Rename tree: { name: "new-tree", rename_from: "old-tree" }
type TreeNameUpgrade struct {
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RenameFrom string `protobuf:"bytes,2,opt,name=rename_from,json=renameFrom,proto3" json:"rename_from,omitempty"`
	Delete     bool   `protobuf:"varint,3,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (m *TreeNameUpgrade) Reset()         { *m = TreeNameUpgrade{} }
func (m *TreeNameUpgrade) String() string { return proto.CompactTextString(m) }
func (*TreeNameUpgrade) ProtoMessage()    {}
func (*TreeNameUpgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_54242fa334002fa1, []int{1}
}
func (m *TreeNameUpgrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeNameUpgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeNameUpgrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreeNameUpgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeNameUpgrade.Merge(m, src)
}
func (m *TreeNameUpgrade) XXX_Size() int {
	return m.Size()
}
func (m *TreeNameUpgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeNameUpgrade.DiscardUnknown(m)
}

var xxx_messageInfo_TreeNameUpgrade proto.InternalMessageInfo

func (m *TreeNameUpgrade) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TreeNameUpgrade) GetRenameFrom() string {
	if m != nil {
		return m.RenameFrom
	}
	return ""
}

func (m *TreeNameUpgrade) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

// WALEntry is a single Write-Ahead-Log entry
type WALEntry struct {
	Changesets []*NamedChangeSet  `protobuf:"bytes,1,rep,name=changesets,proto3" json:"changesets,omitempty"`
	Upgrades   []*TreeNameUpgrade `protobuf:"bytes,2,rep,name=upgrades,proto3" json:"upgrades,omitempty"`
}

func (m *WALEntry) Reset()         { *m = WALEntry{} }
func (m *WALEntry) String() string { return proto.CompactTextString(m) }
func (*WALEntry) ProtoMessage()    {}
func (*WALEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_54242fa334002fa1, []int{2}
}
func (m *WALEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WALEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WALEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WALEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WALEntry.Merge(m, src)
}
func (m *WALEntry) XXX_Size() int {
	return m.Size()
}
func (m *WALEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_WALEntry.DiscardUnknown(m)
}

var xxx_messageInfo_WALEntry proto.InternalMessageInfo

func (m *WALEntry) GetChangesets() []*NamedChangeSet {
	if m != nil {
		return m.Changesets
	}
	return nil
}

func (m *WALEntry) GetUpgrades() []*TreeNameUpgrade {
	if m != nil {
		return m.Upgrades
	}
	return nil
}

func init() {
	proto.RegisterType((*NamedChangeSet)(nil), "memiavl.NamedChangeSet")
	proto.RegisterType((*TreeNameUpgrade)(nil), "memiavl.TreeNameUpgrade")
	proto.RegisterType((*WALEntry)(nil), "memiavl.WALEntry")
}

func init() { proto.RegisterFile("memiavl/changeset.proto", fileDescriptor_54242fa334002fa1) }

var fileDescriptor_54242fa334002fa1 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4f, 0x4b, 0x02, 0x41,
	0x18, 0xc6, 0x77, 0x54, 0x4c, 0x5f, 0x21, 0x61, 0x90, 0x5c, 0x3c, 0xac, 0x8b, 0xa7, 0x25, 0x70,
	0x17, 0x34, 0xe8, 0x9c, 0xfd, 0x39, 0x45, 0x87, 0xad, 0x88, 0x3a, 0x14, 0xe3, 0xfa, 0x36, 0x0a,
	0xce, 0x8e, 0xcc, 0x8e, 0x81, 0xdf, 0xa2, 0x8f, 0xe5, 0xd1, 0x63, 0xa7, 0x08, 0xfd, 0x22, 0xb1,
	0x7f, 0x18, 0x2b, 0xba, 0xbd, 0xf3, 0xbc, 0xbf, 0xe7, 0xe1, 0x99, 0x19, 0x68, 0x0b, 0x14, 0x33,
	0xf6, 0x36, 0x0f, 0xa2, 0x29, 0x8b, 0x39, 0x26, 0xa8, 0xfd, 0x85, 0x92, 0x5a, 0xd2, 0x83, 0x62,
	0xd1, 0x69, 0x71, 0xc9, 0x65, 0xa6, 0x05, 0xe9, 0x94, 0xaf, 0x3b, 0xad, 0xff, 0x4c, 0xbd, 0x47,
	0x38, 0xbc, 0x61, 0x02, 0x27, 0xe7, 0x99, 0x7e, 0x8b, 0x9a, 0x0e, 0xa1, 0x6e, 0x20, 0x9b, 0xb8,
	0xc4, 0x6b, 0x0c, 0x9a, 0x7e, 0xea, 0xf5, 0x0d, 0x33, 0xaa, 0xac, 0x3f, 0xbb, 0x56, 0xb8, 0xe7,
	0x28, 0x85, 0x4a, 0xcc, 0x04, 0xda, 0x25, 0x97, 0x78, 0xf5, 0x30, 0x9b, 0x7b, 0xcf, 0xd0, 0xbc,
	0x53, 0x88, 0x69, 0xfc, 0xfd, 0x82, 0x2b, 0x36, 0x41, 0x83, 0x91, 0x3d, 0x46, 0xbb, 0xd0, 0x50,
	0x98, 0x4e, 0x2f, 0xaf, 0x4a, 0x8a, 0x22, 0x01, 0x72, 0xe9, 0x4a, 0x49, 0x41, 0x8f, 0xa0, 0x3a,
	0xc1, 0x39, 0x6a, 0xb4, 0xcb, 0x2e, 0xf1, 0x6a, 0x61, 0x71, 0xea, 0xad, 0xa0, 0xf6, 0x70, 0x76,
	0x7d, 0x19, 0x6b, 0xb5, 0xa2, 0xa7, 0x00, 0xa6, 0x4c, 0x62, 0x13, 0xb7, 0xec, 0x35, 0x06, 0x6d,
	0xbf, 0x78, 0x10, 0xff, 0xf7, 0x0d, 0xc3, 0x1f, 0x28, 0x3d, 0x81, 0xda, 0x32, 0x2f, 0x97, 0xd8,
	0xa5, 0xcc, 0x66, 0x1b, 0xdb, 0x9f, 0xf6, 0xa1, 0x21, 0x47, 0x17, 0xeb, 0xad, 0x43, 0x36, 0x5b,
	0x87, 0x7c, 0x6d, 0x1d, 0xf2, 0xbe, 0x73, 0xac, 0xcd, 0xce, 0xb1, 0x3e, 0x76, 0x8e, 0xf5, 0x74,
	0xcc, 0x67, 0x7a, 0xba, 0x1c, 0xfb, 0x91, 0x14, 0x41, 0xa4, 0x56, 0x0b, 0x2d, 0xfb, 0x52, 0xf1,
	0x7e, 0x34, 0x65, 0xb3, 0x38, 0x88, 0x94, 0x8c, 0x65, 0x12, 0x14, 0xf9, 0xe3, 0x6a, 0xf6, 0x05,
	0xc3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xc6, 0x84, 0xe9, 0xd2, 0x01, 0x00, 0x00,
}

func (m *NamedChangeSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamedChangeSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamedChangeSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChangeset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Changeset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintChangeset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TreeNameUpgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeNameUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeNameUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Delete {
		i--
		if m.Delete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.RenameFrom) > 0 {
		i -= len(m.RenameFrom)
		copy(dAtA[i:], m.RenameFrom)
		i = encodeVarintChangeset(dAtA, i, uint64(len(m.RenameFrom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChangeset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WALEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WALEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WALEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Upgrades) > 0 {
		for iNdEx := len(m.Upgrades) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Upgrades[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChangeset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Changesets) > 0 {
		for iNdEx := len(m.Changesets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Changesets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChangeset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintChangeset(dAtA []byte, offset int, v uint64) int {
	offset -= sovChangeset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NamedChangeSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Changeset.Size()
	n += 1 + l + sovChangeset(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChangeset(uint64(l))
	}
	return n
}

func (m *TreeNameUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChangeset(uint64(l))
	}
	l = len(m.RenameFrom)
	if l > 0 {
		n += 1 + l + sovChangeset(uint64(l))
	}
	if m.Delete {
		n += 2
	}
	return n
}

func (m *WALEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Changesets) > 0 {
		for _, e := range m.Changesets {
			l = e.Size()
			n += 1 + l + sovChangeset(uint64(l))
		}
	}
	if len(m.Upgrades) > 0 {
		for _, e := range m.Upgrades {
			l = e.Size()
			n += 1 + l + sovChangeset(uint64(l))
		}
	}
	return n
}

func sovChangeset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChangeset(x uint64) (n int) {
	return sovChangeset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NamedChangeSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamedChangeSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamedChangeSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changeset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Changeset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangeset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeNameUpgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreeNameUpgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreeNameUpgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenameFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenameFrom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChangeset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WALEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WALEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WALEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changesets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changesets = append(m.Changesets, &NamedChangeSet{})
			if err := m.Changesets[len(m.Changesets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upgrades", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChangeset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChangeset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Upgrades = append(m.Upgrades, &TreeNameUpgrade{})
			if err := m.Upgrades[len(m.Upgrades)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangeset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangeset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChangeset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChangeset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChangeset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChangeset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChangeset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChangeset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChangeset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChangeset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChangeset = fmt.Errorf("proto: unexpected end of group")
)
